package web2017.team4.wanglin.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import web2017.team4.wanglin.domain.User;

@Repository
public class UserDao {

	// 注入JdbcTemplate
	@Autowired
	private JdbcTemplate jdbcTemplate;

	/**
	 * 根据用户名密码获取匹配用户数
	 * 
	 * @param userName
	 * @param password
	 * @return
	 */
	public int getMatchCount(String userName, String password) {
		String sqlStr = " select count(*) from t_user "
				+ " where user_name = ? and password = ? ";
		return jdbcTemplate.queryForInt(sqlStr, new Object[] { userName,
				password });
	}

	/**
	 * 通过userName来查找指定用户
	 * 
	 * @param userName
	 * @return
	 */
	public User findUserByUserName(final String userName) {
		String sqlStr = " select user_id, user_name, credits "
				+ " from t_user where user_name = ? ";
		final User user = new User();
		jdbcTemplate.query(sqlStr, new Object[] { userName },
				new RowCallbackHandler() {
					// 通过匿名类方式实现回调函数
					public void processRow(ResultSet rs) throws SQLException {
						user.setUserId(rs.getInt("user_id"));
						user.setUserName(userName);
						user.setCredits(rs.getInt("credits"));
					}
				});
		return user;
	}

	/**
	 * 更新用户信息
	 * 
	 * @param user
	 */
	public void updateLoginInfo(User user) {
		String sqlStr = " update t_user set last_visit = ?, last_ip = ?, credits=? "
				+ "where user_id = ? ";
		jdbcTemplate.update(
				sqlStr,
				new Object[] { user.getLastVisit(), user.getLastIp(),
						user.getCredits(), user.getUserId() });
	}

	/**
	 * 向用户表添加数据
	 * 
	 * @param user
	 */
	public void register(User user) {
		String sqlStr = "insert t_user (user_name, password) values(?, ?)";
		jdbcTemplate.update(sqlStr,
				new Object[] { user.getUserName(), user.getPassword() });
	}

	public List<User> getUserList() {
		String sqlStr = "select user_id, password, user_name, last_visit, last_ip, credits from t_user";
		List<Map<String, Object>> list = jdbcTemplate.queryForList(sqlStr);

		List<User> users = new ArrayList<User>();
		for (Map<String, Object> map : list) {
			User user = UserDao.toObject(map);
			if (user != null) {
				users.add(user);
			}
		}

		return users;
	}

	public static User toObject(Map<String, Object> map) {
		User user = new User();
		user.setUserId((int) map.get("user_id"));
		user.setPassword((String) map.get("password"));
		user.setUserName((String) map.get("user_name"));
		user.setLastVisit((Date) map.get("last_visit"));
		user.setLastIp((String) map.get("last_ip"));
		if (map.get("credits") != null) {
			user.setCredits((int) map.get("credits"));
		} else {
			user.setCredits(0);
		}
		return user;
	}

	/**
	 * 删除用户
	 * 
	 * @param user
	 */
	public void deleteUser(User user) {
		String sqlStr = "delete from t_user where user_id = ? ";
		jdbcTemplate.update(sqlStr, new Object[] { user.getUserId() });
	}

	public void modifyUser(User user) {
		String sqlStr = " update t_user set user_name = ?, password = ? ,credits = ?"
				+ "where user_id = ? ";
		jdbcTemplate.update(
				sqlStr,
				new Object[] { user.getUserName(), user.getPassword(),
						user.getCredits(), user.getUserId() });
	}
}
